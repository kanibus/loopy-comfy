name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev
        sudo apt-get install -y python3-tk xvfb
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Type check with mypy
      run: |
        mypy --ignore-missing-imports --no-strict-optional core/ nodes/ utils/
      continue-on-error: true
    
    - name: Run tests with pytest
      env:
        DISPLAY: ':99'
      run: |
        # Start virtual display for GUI tests
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        # Run comprehensive test suite
        python -m pytest tests/ -v --tb=short --cov=. --cov-report=xml --cov-report=term-missing
    
    - name: Run UI enhancement compatibility tests
      env:
        DISPLAY: ':99'
      run: |
        python test_ui_enhancements.py
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Check code formatting with black
      run: black --check --diff .
    
    - name: Check import sorting with isort
      run: isort --check-only --diff .
    
    - name: Lint with flake8
      run: flake8 . --max-line-length=127
  
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run security scan with bandit
      run: bandit -r . -f json -o bandit-report.json || true
    
    - name: Check dependencies with safety
      run: safety check --json || true
  
  validate-workflows:
    name: Validate Workflow Files
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate ComfyUI workflows
      run: |
        # Check that workflow JSON files are valid
        python -c "
        import json
        import os
        
        workflow_dir = 'workflows'
        if os.path.exists(workflow_dir):
            for f in os.listdir(workflow_dir):
                if f.endswith('.json'):
                    path = os.path.join(workflow_dir, f)
                    try:
                        with open(path, 'r') as file:
                            json.load(file)
                        print(f'✓ {f} is valid JSON')
                    except json.JSONDecodeError as e:
                        print(f'✗ {f} has invalid JSON: {e}')
                        exit(1)
        else:
            print('No workflows directory found')
        "
  
  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools
    
    - name: Build package
      run: |
        # Create a simple setup.py for building if it doesn't exist
        if [ ! -f setup.py ]; then
          cat > setup.py << 'EOF'
        from setuptools import setup, find_packages
        
        setup(
            name="loopy-comfy",
            version="1.2.0",
            packages=find_packages(),
            python_requires=">=3.9",
        )
        EOF
        fi
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg python3-tk xvfb
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt
    
    - name: Run integration tests
      env:
        DISPLAY: ':99'
      run: |
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        python -m pytest tests/test_integration.py -v
        python -m pytest tests/test_comfyui_integration.py -v
    
    - name: Test critical mathematical validation
      run: |
        # Run the 10K no-repetition validation test
        python -c "
        from tests.test_markov_engine import test_no_repetition_guarantee_10k
        print('Running 10K no-repetition validation...')
        test_no_repetition_guarantee_10k()
        print('✓ Mathematical validation passed')
        "